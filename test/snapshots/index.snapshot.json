{"should recommend major":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"(t) => {\n  const commits = [\n    'fix(bar): quxxxxxxxx',\n    'major: foo bar baz',\n    'feat: some awesome feature',\n    'fix: yeah great bugfix',\n  ];\n\n  const result = recommendedBump(commits);\n  t.strictEqual(result.increment, 'major');\n\n  t.ok(result.major);\n  t.ok(result.minor);\n  t.ok(result.patch);\n\n  t.ok(Array.isArray(result.major));\n  t.ok(Array.isArray(result.minor));\n  t.ok(Array.isArray(result.patch));\n\n  t.strictEqual(result.major.length, 1);\n  t.strictEqual(result.minor.length, 1);\n  t.strictEqual(result.patch.length, 2);\n\n  t.strictEqual(result.major[0].header.type, 'major');\n  t.strictEqual(result.major[0].header.scope, '');\n  t.strictEqual(result.major[0].header.subject, 'foo bar baz');\n  t.strictEqual(result.major[0].header.toString(), 'major: foo bar baz');\n}","title":"should recommend major"},"should recommend major when detect `BREAKING CHANGE:` somewhere":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":2,"str":"(t) => {\n  const commits = [\n    `fix: some awesome new major\n\nBREAKING CHANGE: this is breaking, watch out!\n\nSigned-off-by: Charlike Mike Reagent`,\n    'feat: wooh hooo',\n  ];\n  const { major, increment } = recommendedBump(commits);\n\n  t.strictEqual(increment, 'major');\n  t.strictEqual(major[0].header.toString(), 'fix: some awesome new major');\n  t.strictEqual(major[0].body, 'BREAKING CHANGE: this is breaking, watch out!');\n  t.strictEqual(major[0].footer, 'Signed-off-by: Charlike Mike Reagent');\n}","title":"should recommend major when detect `BREAKING CHANGE:` somewhere"},"should recommend minor":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":3,"str":"(t) => {\n  const { increment, minor } = recommendedBump([\n    'fix(cli): okkkk',\n    'feat(duh): yeapp',\n    'chore: some non src changes',\n  ]);\n\n  t.strictEqual(increment, 'minor');\n  t.strictEqual(minor[0].header.toString(), 'feat(duh): yeapp');\n}","title":"should recommend minor"},"should recommend patch":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":4,"str":"(t) => {\n  const { increment, patch } = recommendedBump([\n    'chore(cli): okkkk',\n    'chore(duh): yeapp',\n    'fix: yeah some awesome bugfix',\n  ]);\n\n  t.strictEqual(increment, 'patch');\n  t.strictEqual(patch[0].header.toString(), 'fix: yeah some awesome bugfix');\n}","title":"should recommend patch"},"should return {increment: false} when no commits":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":5,"str":"(t) => {\n  t.deepStrictEqual(recommendedBump(), { increment: false });\n}","title":"should return {increment: false} when no commits"},"should be able to accept Array of Commit objects as commits":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":6,"str":"(t) => {\n  const commitOne = parse('fix: foo bar baz', plugins);\n  const commitTwo = parse('feat: quxie', plugins);\n\n  const result = recommendedBump([commitOne, commitTwo]);\n  t.strictEqual(result.increment, 'minor');\n}","title":"should be able to accept Array of Commit objects as commits"}}