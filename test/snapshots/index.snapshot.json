{"should recommended patch bump":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"(t) => {\n  const allCommits = [\n    'chore: foo bar baz',\n    dedent`fix(cli): some bugfix msg here\n\n    Some awesome body.\n\n    Great footer and GPG sign off, yeah!\n    Signed-off-by: Awesome footer <foobar@gmail.com>`,\n  ];\n\n  const { increment, isBreaking, patch, commits } = recommendedBump(allCommits);\n\n  t.strictEqual(Array.isArray(commits), true);\n  t.strictEqual(isBreaking, false);\n  t.strictEqual(increment, 'patch');\n  t.strictEqual(patch[0].header.type, 'fix');\n  t.strictEqual(patch[0].header.scope, 'cli');\n  t.strictEqual(patch[0].header.subject, 'some bugfix msg here');\n  t.strictEqual(\n    stringifyHeader(patch[0].header),\n    'fix(cli): some bugfix msg here',\n  );\n  t.strictEqual(patch[0].body, 'Some awesome body.');\n  t.strictEqual(\n    patch[0].footer,\n    'Great footer and GPG sign off, yeah!\\nSigned-off-by: Awesome footer <foobar@gmail.com>',\n  );\n}","title":"should recommended patch bump"},"should recommend minor bump":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":2,"str":"(t) => {\n  const commitOne = parse('fix: foo bar');\n  const commitTwo = parse('feat: some feature subject');\n\n  const result = recommendedBump([commitOne, commitTwo]);\n  t.strictEqual(result.increment, 'minor');\n  t.strictEqual(result.isBreaking, false);\n}","title":"should recommend minor bump"},"should recommend major bump from `fix` type":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":3,"str":"(t) => {\n  const result = recommendedBump([\n    'feat: ho ho ho',\n    'fix: foo bar baz\\n\\nBREAKING CHANGE: ouch!',\n  ]);\n\n  t.strictEqual(Array.isArray(result.commits), true);\n  t.strictEqual(result.increment, 'major');\n  t.strictEqual(result.isBreaking, true);\n  t.strictEqual(result.major[0].header.type, 'fix');\n  t.strictEqual(result.major[0].header.subject, 'foo bar baz');\n  t.strictEqual(result.major[0].body, 'BREAKING CHANGE: ouch!');\n\n  t.deepStrictEqual(result.minor[0].header, {\n    type: 'feat',\n    scope: null,\n    subject: 'ho ho ho',\n  });\n}","title":"should recommend major bump from `fix` type"},"should return { increment: false, commits: Array<Commit> } when no need for bump":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":4,"str":"(t) => {\n  const result = recommendedBump([\n    'chore(ci): update ci config',\n    'test: ok okey boody man',\n    'refactor: some tweaks',\n  ]);\n\n  t.strictEqual(result.increment, false);\n  t.strictEqual(result.isBreaking, false);\n\n  t.strictEqual(Array.isArray(result.commits), true);\n  const [one, two, three] = result.commits;\n  t.deepStrictEqual(one.header, {\n    type: 'chore',\n    scope: 'ci',\n    subject: 'update ci config',\n  });\n  t.deepStrictEqual(two.header, {\n    type: 'test',\n    scope: null,\n    subject: 'ok okey boody man',\n  });\n  t.deepStrictEqual(three.header, {\n    type: 'refactor',\n    scope: null,\n    subject: 'some tweaks',\n  });\n}","title":"should return { increment: false, commits: Array<Commit> } when no need for bump"}}